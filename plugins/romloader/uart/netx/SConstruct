# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Set up the Muhkuh Build System.
#

SConscript('mbs/SConscript')
Import('env_default')

#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_common = """
	src/header.S
	src/init_netx_test.S
	src/main.c
	src/systime.c
	src/uprintf.c
"""
#	src/uartmon.c


sources_custom_netx500 = """
	src/netx500/netx500_io_areas.c
"""


sources_custom_netx50 = """
	src/netx50/netx50_io_areas.c
"""


sources_custom_netx10 = """
	src/netx10/netx10_io_areas.c
"""

src_netx500 = Split(sources_common+sources_custom_netx500)
src_netx50  = Split(sources_common+sources_custom_netx50)
src_netx10  = Split(sources_common+sources_custom_netx10)


#----------------------------------------------------------------------------
#
# Create the compiler environments.
#

env_default.Append(CPPPATH = ['src'])

env_netx500_default = env_default.CreateCompilerEnv('500', 'arm926ej-s')
env_netx500_default.Append(CPPPATH = ['src/netx500'])

env_netx50_default = env_default.CreateCompilerEnv('50',  'arm966e-s')
env_netx50_default.Append(CPPPATH = ['src/netx50'])

env_netx10_default = env_default.CreateCompilerEnv('10',  'arm966e-s')
env_netx10_default.Append(CPPPATH = ['src/netx10'])


#----------------------------------------------------------------------------
#
# Build the netX500 files.
#
env_netx500_intram = env_netx500_default.Clone()
env_netx500_intram.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_intram.Append(CPPPATH = ['src/netx500'])
src_netx500_intram = env_netx500_intram.SetBuildPath('targets/netx500_intram', 'src', src_netx500)
elf_netx500_intram = env_netx500_intram.Elf('targets/uartmon_netx500_intram.elf', src_netx500_intram)
bin_netx500_intram = env_netx500_intram.ObjCopy('targets/uartmon_netx500_intram.bin', elf_netx500_intram)
arr_netx500_intram = env_netx500_intram.DataArray('targets/uartmon_netx500_intram.c', bin_netx500_intram, DATAARRAY_NAME='auc_uartmon_netx500_intram')


#----------------------------------------------------------------------------
#
# Build the netX50 files.
#
env_netx50_intram = env_netx50_default.Clone()
env_netx50_intram.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_intram.Append(CPPPATH = ['src/netx50'])
src_netx50_intram = env_netx50_intram.SetBuildPath('targets/netx50_intram', 'src', src_netx50)
elf_netx50_intram = env_netx50_intram.Elf('targets/uartmon_netx50_intram.elf', src_netx50_intram)
bin_netx50_intram = env_netx50_intram.ObjCopy('targets/uartmon_netx50_intram.bin', elf_netx50_intram)
arr_netx50_intram = env_netx50_intram.DataArray('targets/uartmon_netx50_intram.c', bin_netx50_intram, DATAARRAY_NAME='auc_uartmon_netx50_intram')

# This is for debug only.
env_netx50_intram.UUEncode('targets/uartmon_netx50_intram.uue', bin_netx50_intram, UUE_ELF=elf_netx50_intram, UUE_PRE = """
LUUE ${LOAD_HEX}
""", UUE_POST = "CALL ${EXEC_HEX}")

#----------------------------------------------------------------------------
#
# Build the netX10 files.
#
env_netx10_intram = env_netx10_default.Clone()
env_netx10_intram.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_intram.Append(CPPPATH = ['src/netx10'])
src_netx10_intram = env_netx10_intram.SetBuildPath('targets/netx10_intram', 'src', src_netx10)
elf_netx10_intram = env_netx10_intram.Elf('targets/uartmon_netx10_intram.elf', src_netx10_intram)
bin_netx10_intram = env_netx10_intram.ObjCopy('targets/uartmon_netx10_intram.bin', elf_netx10_intram)
arr_netx10_intram = env_netx10_intram.DataArray('targets/uartmon_netx10_intram.c', bin_netx10_intram, DATAARRAY_NAME='auc_uartmon_netx10_intram')


#----------------------------------------------------------------------------
#
# Build the diff and the zip distribution.
#
env_default.Diff('targets/uartmon_firmware.diff', arr_netx500_intram + arr_netx10_intram, DIFF_PATCHED_FOLDER='plugins/romloader/uart/netx')


aTranslate = dict({
	arr_netx500_intram[0]: 'plugins/romloader/uart/netx/targets/',
	arr_netx500_intram[1]: 'plugins/romloader/uart/netx/targets/',
	arr_netx50_intram[0]:  'plugins/romloader/uart/netx/targets/',
	arr_netx50_intram[1]:  'plugins/romloader/uart/netx/targets/',
	arr_netx10_intram[0]:  'plugins/romloader/uart/netx/targets/',
	arr_netx10_intram[1]:  'plugins/romloader/uart/netx/targets/'
})
env_default.FlexZip('targets/uartmon_firmware.zip', arr_netx500_intram + arr_netx50_intram + arr_netx10_intram, ZIP_PATH_TRANSLATE=aTranslate)
