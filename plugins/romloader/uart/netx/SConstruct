# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Set up the Muhkuh Build System.
#

SConscript('mbs/SConscript')
Import('env_default')

SConscript('platform/SConscript')
Import('platform_lib_netx500', 'platform_lib_netx56', 'platform_lib_netx50', 'platform_lib_netx10')

#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_monitor = """
	src/init_netx_test.S
	src/main.c
	src/transport.c
"""


sources_bootstrap = """
	src/bootstrap_init.S
	src/bootstrap.c
"""


#----------------------------------------------------------------------------
#
# Create the compiler environments.
#

env_default.Append(CPPPATH = ['src', '../../machine_interface/netx/src', 'platform/src', 'platform/src/lib'])
#env_default.Append(LIBPATH = ['../../machine_interface/netx/targets'])
libmi_netx500 = [File('../../machine_interface/netx/targets/libmi_netx500.a')]
libmi_netx50  = [File('../../machine_interface/netx/targets/libmi_netx50.a')]
libmi_netx10  = [File('../../machine_interface/netx/targets/libmi_netx10.a')]

#----------------------------------------------------------------------------
#
# Build the netX500 files.
#
env_netx500_monitor = env_default.CreateCompilerEnv('500', ['cpu=arm926ej-s'])
env_netx500_monitor.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_monitor.Append(CPPPATH = ['src/netx500'])
src_netx500_monitor = env_netx500_monitor.SetBuildPath('targets/netx500_monitor', 'src', sources_monitor)
elf_netx500_monitor = env_netx500_monitor.Elf('targets/uartmon_netx500_monitor.elf', src_netx500_monitor + platform_lib_netx500 + libmi_netx500)
bin_netx500_monitor = env_netx500_monitor.ObjCopy('targets/uartmon_netx500_monitor.bin', elf_netx500_monitor)
arr_netx500_monitor = env_netx500_monitor.DataArray('targets/uartmon_netx500_monitor.c', bin_netx500_monitor, DATAARRAY_NAME='auc_uartmon_netx500_monitor')
sym_netx500_monitor = env_netx500_monitor.GccSymbolTemplate('targets/uartmon_netx500_monitor_run.h', elf_netx500_monitor, GCCSYMBOLTEMPLATE_TEMPLATE='templates/uartmon_netx500_monitor_run.h')

env_netx500_bootstrap = env_default.CreateCompilerEnv('500', ['cpu=arm926ej-s', 'thumb'])
env_netx500_bootstrap.Replace(LDFILE = 'src/netx500/netx500_bootstrap.ld')
env_netx500_bootstrap.Append(CPPPATH = ['targets'])
src_netx500_bootstrap = env_netx500_bootstrap.SetBuildPath('targets/netx500_bootstrap', 'src', sources_bootstrap)
elf_netx500_bootstrap = env_netx500_bootstrap.Elf('targets/uartmon_netx500_bootstrap.elf', src_netx500_bootstrap)
bin_netx500_bootstrap = env_netx500_bootstrap.ObjCopy('targets/uartmon_netx500_bootstrap.bin', elf_netx500_bootstrap)
arr_netx500_bootstrap = env_netx500_bootstrap.DataArray('targets/uartmon_netx500_bootstrap.c', bin_netx500_bootstrap, DATAARRAY_NAME='auc_uartmon_netx500_bootstrap')
sym_netx500_bootstrap = env_netx500_bootstrap.GccSymbolTemplate('targets/uartmon_netx500_bootstrap_run.h', elf_netx500_bootstrap, GCCSYMBOLTEMPLATE_TEMPLATE='templates/uartmon_netx500_bootstrap_run.h')

#----------------------------------------------------------------------------
#
# Build the netX50 files.
#
env_netx50_monitor = env_default.CreateCompilerEnv('50', ['cpu=arm966e-s'])
env_netx50_monitor.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_monitor.Append(CPPPATH = ['src/netx50'])
src_netx50_monitor = env_netx50_monitor.SetBuildPath('targets/netx50_monitor', 'src', sources_monitor)
elf_netx50_monitor = env_netx50_monitor.Elf('targets/uartmon_netx50_monitor.elf', src_netx50_monitor + platform_lib_netx50 + libmi_netx50)
bin_netx50_monitor = env_netx50_monitor.ObjCopy('targets/uartmon_netx50_monitor.bin', elf_netx50_monitor)
arr_netx50_monitor = env_netx50_monitor.DataArray('targets/uartmon_netx50_monitor.c', bin_netx50_monitor, DATAARRAY_NAME='auc_uartmon_netx50_monitor')
sym_netx50_monitor = env_netx50_monitor.GccSymbolTemplate('targets/uartmon_netx50_monitor_run.h', elf_netx50_monitor, GCCSYMBOLTEMPLATE_TEMPLATE='templates/uartmon_netx50_monitor_run.h')

env_netx50_bootstrap = env_default.CreateCompilerEnv('50', ['cpu=arm966e-s', 'thumb'])
env_netx50_bootstrap.Replace(LDFILE = 'src/netx50/netx50_bootstrap.ld')
env_netx50_bootstrap.Append(CPPPATH = ['targets'])
src_netx50_bootstrap = env_netx50_bootstrap.SetBuildPath('targets/netx50_bootstrap', 'src', sources_bootstrap)
elf_netx50_bootstrap = env_netx50_bootstrap.Elf('targets/uartmon_netx50_bootstrap.elf', src_netx50_bootstrap)
bin_netx50_bootstrap = env_netx50_bootstrap.ObjCopy('targets/uartmon_netx50_bootstrap.bin', elf_netx50_bootstrap)
arr_netx50_bootstrap = env_netx50_bootstrap.DataArray('targets/uartmon_netx50_bootstrap.c', bin_netx50_bootstrap, DATAARRAY_NAME='auc_uartmon_netx50_bootstrap')
sym_netx50_bootstrap = env_netx50_bootstrap.GccSymbolTemplate('targets/uartmon_netx50_bootstrap_run.h', elf_netx50_bootstrap, GCCSYMBOLTEMPLATE_TEMPLATE='templates/uartmon_netx50_bootstrap_run.h')

#----------------------------------------------------------------------------
#
# Build the netX10 files.
#
env_netx10_monitor = env_default.CreateCompilerEnv('10', ['cpu=arm966e-s'])
env_netx10_monitor.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_monitor.Append(CPPPATH = ['src/netx10'])
src_netx10_monitor = env_netx10_monitor.SetBuildPath('targets/netx10_monitor', 'src', sources_monitor)
elf_netx10_monitor = env_netx10_monitor.Elf('targets/uartmon_netx10_monitor.elf', src_netx10_monitor + platform_lib_netx10 + libmi_netx10)
bin_netx10_monitor = env_netx10_monitor.ObjCopy('targets/uartmon_netx10_monitor.bin', elf_netx10_monitor)
arr_netx10_monitor = env_netx10_monitor.DataArray('targets/uartmon_netx10_monitor.c', bin_netx10_monitor, DATAARRAY_NAME='auc_uartmon_netx10_monitor')
sym_netx10_monitor = env_netx10_monitor.GccSymbolTemplate('targets/uartmon_netx10_monitor_run.h', elf_netx10_monitor, GCCSYMBOLTEMPLATE_TEMPLATE='templates/uartmon_netx10_monitor_run.h')

env_netx10_bootstrap = env_default.CreateCompilerEnv('10', ['cpu=arm966e-s', 'thumb'])
env_netx10_bootstrap.Replace(LDFILE = 'src/netx10/netx10_bootstrap.ld')
env_netx10_bootstrap.Append(CPPPATH = ['targets'])
src_netx10_bootstrap = env_netx10_bootstrap.SetBuildPath('targets/netx10_bootstrap', 'src', sources_bootstrap)
elf_netx10_bootstrap = env_netx10_bootstrap.Elf('targets/uartmon_netx10_bootstrap.elf', src_netx10_bootstrap)
bin_netx10_bootstrap = env_netx10_bootstrap.ObjCopy('targets/uartmon_netx10_bootstrap.bin', elf_netx10_bootstrap)
arr_netx10_bootstrap = env_netx10_bootstrap.DataArray('targets/uartmon_netx10_bootstrap.c', bin_netx10_bootstrap, DATAARRAY_NAME='auc_uartmon_netx10_bootstrap')
sym_netx10_bootstrap = env_netx10_bootstrap.GccSymbolTemplate('targets/uartmon_netx10_bootstrap_run.h', elf_netx10_bootstrap, GCCSYMBOLTEMPLATE_TEMPLATE='templates/uartmon_netx10_bootstrap_run.h')

#----------------------------------------------------------------------------
#
# Build the diff and the zip distribution.
#
env_default.Diff('targets/uartmon_firmware.diff', arr_netx500_monitor + arr_netx10_monitor, DIFF_PATCHED_FOLDER='plugins/romloader/uart/netx')


tRelease = env_default.ArchiveList('zip')
tRelease.AddFiles('plugins/romloader/uart/netx/targets/',  arr_netx500_monitor,
                                                           sym_netx500_monitor,
                                                           arr_netx500_bootstrap,
                                                           sym_netx500_bootstrap)
tRelease.AddFiles('plugins/romloader/uart/netx/targets/',  arr_netx50_monitor,
                                                           sym_netx50_monitor,
                                                           arr_netx50_bootstrap,
                                                           sym_netx50_bootstrap)
tRelease.AddFiles('plugins/romloader/uart/netx/targets/',  arr_netx10_monitor,
                                                           sym_netx10_monitor,
                                                           arr_netx10_bootstrap,
                                                           sym_netx10_bootstrap)
tArc = env_default.Archive('targets/uartmon_firmware.zip', None, ARCHIVE_CONTENTS=tRelease)
