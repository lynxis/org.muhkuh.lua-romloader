// ---------------------------------------------------------------------------
// _luaif/mhash_lua.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "mhash_wxlua_bindings.h"
#include "application/mhash_lua_interface.h"

// ---------------------------------------------------------------------------
// Bind class mhash_state
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'mhash_state'
int wxluatype_mhash_state = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_mhash_state_count[] = { &wxluatype_mhash_state, NULL };
static int LUACALL wxLua_mhash_state_count(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_mhash_state_count[1] = {{ wxLua_mhash_state_count, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_mhash_state_count }};
// 	double count()
static int LUACALL wxLua_mhash_state_count(lua_State *L)
{
    // get this
    mhash_state * self = (mhash_state *)wxluaT_getuserdatatype(L, 1, wxluatype_mhash_state);
    // call count
    double returns = (self->count());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_mhash_state_get_block_size[] = { &wxluatype_mhash_state, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_mhash_state_get_block_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_mhash_state_get_block_size[1] = {{ wxLua_mhash_state_get_block_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_mhash_state_get_block_size }};
// 	double get_block_size(hashid type)
static int LUACALL wxLua_mhash_state_get_block_size(lua_State *L)
{
    // hashid type
    hashid type = (hashid)wxlua_getintegertype(L, 2);
    // get this
    mhash_state * self = (mhash_state *)wxluaT_getuserdatatype(L, 1, wxluatype_mhash_state);
    // call get_block_size
    double returns = (self->get_block_size(type));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_mhash_state_get_hash_name[] = { &wxluatype_mhash_state, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_mhash_state_get_hash_name(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_mhash_state_get_hash_name[1] = {{ wxLua_mhash_state_get_hash_name, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_mhash_state_get_hash_name }};
// 	wxString get_hash_name(hashid type)
static int LUACALL wxLua_mhash_state_get_hash_name(lua_State *L)
{
    // hashid type
    hashid type = (hashid)wxlua_getintegertype(L, 2);
    // get this
    mhash_state * self = (mhash_state *)wxluaT_getuserdatatype(L, 1, wxluatype_mhash_state);
    // call get_hash_name
    wxString returns = (self->get_hash_name(type));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_mhash_state_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_mhash_state_constructor[1] = {{ wxLua_mhash_state_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
// 	mhash_state()
static int LUACALL wxLua_mhash_state_constructor(lua_State *L)
{
    // call constructor
    mhash_state* returns = new mhash_state();
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_mhash_state);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_mhash_state_constructor1[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_mhash_state_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_mhash_state_constructor1[1] = {{ wxLua_mhash_state_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_mhash_state_constructor1 }};
// 	mhash_state(hashid type)
static int LUACALL wxLua_mhash_state_constructor1(lua_State *L)
{
    // hashid type
    hashid type = (hashid)wxlua_getintegertype(L, 1);
    // call constructor
    mhash_state* returns = new mhash_state(type);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_mhash_state);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_mhash_state_constructor2[] = { &wxluatype_mhash_state, NULL };
static int LUACALL wxLua_mhash_state_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_mhash_state_constructor2[1] = {{ wxLua_mhash_state_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_mhash_state_constructor2 }};
// 	mhash_state(mhash_state *ptMHash)
static int LUACALL wxLua_mhash_state_constructor2(lua_State *L)
{
    // mhash_state ptMHash
    mhash_state * ptMHash = (mhash_state *)wxluaT_getuserdatatype(L, 1, wxluatype_mhash_state);
    // call constructor
    mhash_state* returns = new mhash_state(ptMHash);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_mhash_state);

    return 1;
}



// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_mhash_state_constructor_overload[] =
{
    { wxLua_mhash_state_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
    { wxLua_mhash_state_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_mhash_state_constructor1 },
    { wxLua_mhash_state_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_mhash_state_constructor2 },
};
static int s_wxluafunc_wxLua_mhash_state_constructor_overload_count = sizeof(s_wxluafunc_wxLua_mhash_state_constructor_overload)/sizeof(wxLuaBindCFunc);


// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod mhash_state_methods[] = {
    { "count", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_mhash_state_count, 1, NULL },
    { "get_block_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_mhash_state_get_block_size, 1, NULL },
    { "get_hash_name", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_mhash_state_get_hash_name, 1, NULL },

    { "mhash_state", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_mhash_state_constructor_overload, s_wxluafunc_wxLua_mhash_state_constructor_overload_count, 0 },

    { 0, 0, 0, 0 },
};

int mhash_state_methodCount = sizeof(mhash_state_methods)/sizeof(wxLuaBindMethod) - 1;


